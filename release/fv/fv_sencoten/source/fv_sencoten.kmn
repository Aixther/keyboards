store(&VERSION) "10.0"
store(&KEYBOARDVERSION) '9.2'
store(&TARGETS) "any"
c store(&ETHNOLOGUECODE) "str"
store(&COPYRIGHT) '(c) 2008-2022 FirstVoices, SIL International. Portions (c) 2006 Chris Harvey'
store(&NAME) 'SENĆOŦEN'
store(&BITMAP) 'fv_sencoten.ico'
store(&HOTKEY) '[CTRL SHIFT K_6]'
store(&VISUALKEYBOARD) 'fv_sencoten.kvks'
store(&KMW_HELPFILE) 'fv_sencoten_kmw_help.htm'
 
begin Unicode > use(main)                      
group(main) using keys  

c --- START OF TOUCH LAYOUT RULES ---

c Touch layout rules originally imported from KeyMap.plist on Tue Nov 17 2015

store(&LAYOUTFILE) 'fv_sencoten.keyman-touch-layout'

+ [T_Q] > 'Q'
+ [T_W_0] > 'W̱'
+ [T_W] > 'W'
+ [T_E] > 'E'
'N' + [T_R] > 'Ṉ'
'W' + [T_R] > 'W̱'
'K' + [T_R] > 'Ḵ'
'T' + [T_R] > 'Ṯ'
'X' + [T_R] > 'X̱'
+ [T_T_0] > 'Ṯ'
+ [T_T_1] > 'Ⱦ'
+ [T_T_2] > 'Ŧ'
+ [T_T] > 'T'
+ [T_Y] > 'Y'
+ [T_U] > 'U'
+ [T_I_0] > 'Í'
+ [T_I] > 'I'
+ [T_O] > 'O'
+ [T_P] > 'P'
+ [T_A_0] > 'Á'
+ [T_A_1] > 'Ⱥ'
+ [T_A] > 'A'
+ [T_S_0] > 'Ś'
+ [T_S] > 'S'
+ [T_D] > 'D'
'A' + [T_F] > 'Ⱥ'
'T' + [T_F] > 'Ⱦ'
'C' + [T_F] > 'Ȼ'
'K' + [T_G] > '₭'
'T' + [T_G] > 'Ŧ'
'L' + [T_G] > 'Ƚ'
+ [T_H] > 'H'
+ [T_J] > 'J'
+ [T_K_0] > 'Ḵ'
+ [T_K_1] > 'Ḱ'
+ [T_K_2] > '₭'
+ [T_K] > 'K'
+ [T_L_0] > 'Ƚ'
+ [T_L] > 'L'
+ [T_COLON] > U+00B8
+ [T_Z] > 's'
+ [T_X] > 'Z'
+ [T_C_0] > 'X̱'
+ [T_C] > 'X'
+ [T_V_0] > 'Ć'
+ [T_V_1] > 'Ȼ'
+ [T_V] > 'C'
'I' + [T_B] > 'Í'
'A' + [T_B] > 'Á'
'S' + [T_B] > 'Ś'
'K' + [T_B] > 'Ḱ'
'C' + [T_B] > 'Ć'
+ [T_N] > 'B'
+ [T_M_0] > 'Ṉ'
+ [T_M] > 'N'
+ [T_COMMA] > 'M'

c --- END OF TOUCH LAYOUT RULES ---

store(&CasedKeys) 'a..z' [K_COMMA] c in capslock, caps should un-caps into lowercase, comma swaps with cedilla

store(ncaps) 'a'..'z'
store(caps) 'A'..'Z'
+ any(ncaps) > index(ncaps,1)
+ any(caps) > index(caps,1)

+ [K_COMMA] > ','
+ [SHIFT K_COMMA] > '¸' c cedilla

c period key produces period no matter what shift state, to keep brackets parallel

+ [SHIFT K_PERIOD] > '.'
+ [SHIFT CAPS K_PERIOD] > '.'

c regardless of caps state, /'-; keys add a diacritic to valid uppercase chars

store(acu0) 'ACIKS'
store(acu1) 'ÁĆÍḰŚ'   
store(sla0) 'ACT' 
store(sla1) "ȺȻȾ"
store(bar0) 'KTL'
store(bar1) '₭ŦȽ' 
store(mau0) 'KNT'
store(mau1) 'ḴṈṮ'
store(mau2) 'WX'  

any(sla0) + [NCAPS K_SLASH] > index(sla1,1)
any(acu0) + [NCAPS K_QUOTE] > index(acu1,1)
any(bar0) + [NCAPS K_HYPHEN] > index(bar1,1) 
any(mau0) + [NCAPS K_COLON] > index(mau1,1)
any(mau2) + [NCAPS K_COLON] > index(mau2,1) U+0331  

any(sla0) + [CAPS K_SLASH] > index(sla1,1)
any(acu0) + [CAPS K_QUOTE] > index(acu1,1)
any(bar0) + [CAPS K_HYPHEN] > index(bar1,1) 
any(mau0) + [CAPS K_COLON] > index(mau1,1)
any(mau2) + [CAPS K_COLON] > index(mau2,1) U+0331 

c regardless of caps state, replace brackets with angle quotes

store(quote0ncaps)  [NCAPS K_LBRKT] [NCAPS K_RBRKT] [SHIFT NCAPS K_LBRKT] [SHIFT NCAPS K_RBRKT]
store(quote0caps)  [CAPS K_LBRKT] [CAPS K_RBRKT] [SHIFT CAPS K_LBRKT] [SHIFT CAPS K_RBRKT]
store(quote1) "«»‹›"
+ any(quote0ncaps) > index(quote1,1) 
+ any(quote0caps) > index(quote1,1) 

c regardless of caps state, store original key values on right alt layer

store(original0ncaps) [RALT NCAPS K_SLASH] [RALT NCAPS K_QUOTE] [RALT NCAPS K_HYPHEN] [RALT NCAPS K_COLON] [RALT NCAPS K_COMMA] [SHIFT NCAPS RALT K_COMMA] [SHIFT NCAPS RALT K_PERIOD] [RALT NCAPS K_LBRKT] [RALT NCAPS K_RBRKT] [SHIFT NCAPS RALT K_LBRKT] [SHIFT NCAPS RALT K_RBRKT]
store(original0caps) [RALT CAPS K_SLASH] [RALT CAPS K_QUOTE] [RALT CAPS K_HYPHEN] [RALT CAPS K_COLON] [RALT CAPS K_COMMA] [SHIFT CAPS RALT K_COMMA] [SHIFT CAPS RALT K_PERIOD] [RALT CAPS K_LBRKT] [RALT CAPS K_RBRKT] [SHIFT CAPS RALT K_LBRKT] [SHIFT CAPS RALT K_RBRKT]
store(original1) "/'-;,<>[]{}" 
+ any(original0ncaps) > index(original1,1)  
+ any(original0caps) > index(original1,1)  


match > use(normalize)
nomatch > use(x)

group(normalize)

group(x) using keys

C don't understand the purpose of this last part but it triggers a warning now due to all the caps
C store(allkeys) 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-=[]\;,./`~!@#$%^&*()_+{}|:"<>?' "'"
C + any(allkeys) > index(allkeys, 1)
